def propfile
def FAILED_STAGE
pipeline {
	agent {
        kubernetes {
			    label 'SpringBootRestApp'
			    defaultContainer 'jnlp'
			    yaml """
apiVersion: v1
kind: Pod
metadata:
labels:
  component: ci
spec:
  containers:
  - name: gradle
    image: gradle:3.5-jdk8-alpine
    command:
    - cat
    tty: true
"""
        }
    }
    	environment {
		javadoc = 'false'
		HOSTS_DEPLOY = 'rhscmdev02.sterling.com'
		test = 'ls -lrt'
		token = credentials('id_rsa_jenkins')
	}
	stages {
		stage('Build & Unit Test') {
			steps {
				container('gradle') {
					script {
						withMaven(maven: 'MAVEN-3.6.3') {
							FAILED_STAGE=env.STAGE_NAME
							echo 'I am executing build and unit test'
							
							echo env.BRANCH_NAME
							echo env.GIT_BRANCH
							
                                                        //sh "mvn -Drevision=EJB-${env.GIT_BRANCH}-build-${env.BUILD_NUMBER}-SNAPSHOT -f sample-java-app/pom.xml clean package"
							propfile = readProperties(file: './project.properties_PROD')	
							if (propfile['javadoc'] == "true") {
								sh 'mvn javadoc:aggregate'
							}
							if (propfile['jacoco'] == "true") {
								jacoco( 
									execPattern: '**/*.exec',
									classPattern: '**/*.class',
									sourcePattern: '**/*.java',
									exclusionPattern: '**/test*'
								)
							}
						}	
					}
				}
			}
		}
		stage('Code Quality') {
			when { expression {javadoc == "true" }}
			steps {
				container('gradle') {
					script {
						withMaven(maven: 'MAVEN-3.6.3') {
							withSonarQubeEnv(installationName: 'Sonarqube') {
								FAILED_STAGE=env.STAGE_NAME
								echo 'I am executing code quality using sonarqube'
								echo ' Update the line below when we switch to actual EJB repo'	
								// sh './gradle Sonarqube'
							}
							//sleep(60)
							timeout(time: 1, unit: 'MINUTES') {
								waitForQualityGate abortPipeline: true
							} 
						}
					}
				}
			}
		}
		stage("Publish Package") {
			when { expression {env.GIT_BRANCH == 'dev' || propfile['publish_pkg'] == "true" }}
			steps {
				container('gradle') {
					script {
						withMaven(maven: 'MAVEN-3.6.3') {
							FAILED_STAGE=env.STAGE_NAME
							echo 'copying the ear file from the individual target directories and copying it to artifacts directory'
							
							sh "echo propfile['ear_file']"
							sh '''
								rm -rf $WORKSPACE/artifacts
								mkdir -p $WORKSPACE/artifacts
								cd $WORKSPACE
								cp -r dist/libs/EJBIntegrationEAR.ear artifacts/
								cp -r deployment/* artifacts/
								tar -czvf artifact.tar.gz $WORKSPACE/artifacts/*
								ls -lrt sample-java-app/target/
							'''
							//sh "mvn clean deploy -Drevision=EJB-${env.GIT_BRANCH}-build-${env.BUILD_NUMBER}-SNAPSHOT -Dmaven.test.skip=true"
						}
					}
				}
			}
		}
		stage("Deploy") {
			when { expression {env.GIT_BRANCH == 'dev' || propfile['publish_pkg'] == "true" }}
			steps {
				container('gradle') {
					script {
						withMaven(maven: 'MAVEN-3.6.3') {
							FAILED_STAGE=env.STAGE_NAME
							USERNAME=HOSTS_DEPLOY
							HOSTS=HOSTS_DEPLOY

							echo "${HOSTS}"
							/*
							mkdir -p $WORKSPACE/artifacts
							echo "Pulling artifact from the repository to deploy"
							sh "mvn org.apache.maven.plugins:maven-dependency-plugin:2.8:get \
								-DrepoUrl=https://archiva.sgnt.devops.accentureanalytics.com/repository/snapshots \
								-Dartifact=io.buildpacks.example:sample:${propfile['artifact_name']}:jar -Ddest=$WORKSPACE/artifacts/myfile.jar"
							sh "ls -la $WORKSPACE/artifacts"
							HOSTS.tokenize(',').each { HOSTNAME ->
								echo "${HOSTNAME}"
								cp -r /c/Windows/System32/config/systemprofile/AppData/Local/Jenkins/.jenkins/workspace/DevOps_EJB_Build/artifacts/* $WORKSPACE/artifacts/

								scp -rp $WORKSPACE/artifacts/propfile['ear_file'] ${USERNAME}@${HOSTNAME}:propfile['deploy_dir']/
								scp -rp $WORKSPACE/artifacts/propfile['target_env']/propfile['migration_file'] ${USERNAME}@${HOSTNAME}:propfile['deploy_dir']/
								scp -rp $WORKSPACE/artifacts/propfile['target_env']/propfile['properties_file'] ${USERNAME}@${HOSTNAME}:propfile['deploy_dir']/
								scp -rp $WORKSPACE/artifacts/propfile['target_env']/propfile['log4j_file'] ${USERNAME}@${HOSTNAME}:propfile['deploy_dir']/

								ssh /bin/chmod 666 propfile['deploy_dir']/propfile['ear_file']
								ssh /bin/chmod 666 propfile['deploy_dir']/propfile['migration_file']
								ssh /bin/chmod 666 propfile['deploy_dir']/propfile['properties_file']
								ssh /bin/chmod 666 propfile['deploy_dir']/propfile['log4j_file']

								ssh cd propfile['deploy_dir'];/usr/local/was/bin/wasMigrate.s -m EcomEjbProxy.mig -r `date "+%Y%m%d%H%M"`	
							}
							*/
						}	
					}
				}
			}
		}
		stage('Post Deploy Tests') {
			parallel {
				stage('Functional Test') {
					steps {
						//withCredentials([sshUserPrivateKey(credentialsId: "id_rsa_jenkins", keyFileVariable: 'keyfile')]) {
							script {
								FAILED_STAGE=env.STAGE_NAME
								echo "I am running Functional Test here"
							}
						//}
					}
				}
				stage('Security Test') {
					when {expression {propfile['ondemand_securitytest'] == "true" }}
					steps {
						container('gradle') {
							script {
								withMaven(maven: 'MAVEN-3.6.3') {
									FAILED_STAGE=env.STAGE_NAME
									echo 'I am running Security Test here'
								}
							}
						}
					}
				}
				stage('Performance Test') {
					when {expression {propfile['ondemand_perfomancetest'] == "true" }}
					steps {
						container('gradle') {
							script {
								withMaven(maven: 'MAVEN-3.6.3') {
									FAILED_STAGE=env.STAGE_NAME
									echo 'I am running Performance Test here'
								}
							}
						}
					}
				}
			}  
		}
	}
	post {
		always {
			script {
				if (propfile['javadoc'] == "true") {
					javadoc(javadocDir: "/$WORKSPACE/target/site/apidocs", keepAll: true)
				}
				echo $notification 
				//office365ConnectorSend message: "<Your message>", status:"<Build status>", webhookUrl:'https://signetjewelers.webhook.office.com/webhookb2/7267f0f6-54db-4883-a692-ae2a83181c69@3aa3ff7f-2e43-4ebd-b484-42e80b2efcaa/JenkinsCI/15424b3bd17449ea91d3c6a5ac8a098d/cfe34240-6403-48cd-a382-0a8cf6c3a1f3'
			}
		}
	}
}
