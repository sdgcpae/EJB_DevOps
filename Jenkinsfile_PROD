def propfile
def FAILED_STAGE
def allJob = env.JOB_NAME.tokenize('/') as String[];
def projectName = allJob[2];
pipeline {
	agent {
        kubernetes {
			    label 'SpringBootRestApp'
			    defaultContainer 'jnlp'
			    yaml """
apiVersion: v1
kind: Pod
metadata:
labels:
  component: ci
spec:
  containers:
  - name: gradle
    image: gradle:3.5-jdk8-alpine
    command:
    - cat
    tty: true
"""
        }
    }
    environment {
    	//SSH TOKENS
		token = credentials('id_rsa_jenkins')
    }
	stages {
		stage('Build & Unit Test') {
			steps {
				container('gradle') {
					script {
						withMaven(maven: 'MAVEN-3.6.3') {
							FAILED_STAGE=env.STAGE_NAME
							echo 'I am executing build and unit test'
							//sh 'gradle clean build'
							propfile = readProperties(file: './project.properties_PROD')	
							if (propfile['javadoc'] == "true") {
								sh 'mvn javadoc:aggregate'
							}
							if (propfile['jacoco'] == "true") {
								jacoco( 
									execPattern: '**/*.exec',
									classPattern: '**/*.class',
									sourcePattern: '**/*.java',
									exclusionPattern: '**/test*'
								)
							}
						}	
					}
				}
			}
		}
		stage('Code Quality') {
			when { expression {propfile['code_quality'] == "true" }}
			steps {
				container('gradle') {
					script {
						withMaven(maven: 'MAVEN-3.6.3') {
							withSonarQubeEnv(installationName: 'Sonarqube') {
								FAILED_STAGE=env.STAGE_NAME
								echo 'I am executing code quality using sonarqube'
								echo ' Update the line below when we switch to actual EJB repo'	
								// sh './gradle Sonarqube'
							}
							sleep(60)
							timeout(time: 1, unit: 'MINUTES') {
								waitForQualityGate abortPipeline: true
							} 
						}
					}
				}
			}
		}
		stage("Publish Package") {
			when { expression {env.GIT_BRANCH == 'dev' || propfile['publish_pkg'] == "true" }}
			steps {
				container('gradle') {
					script {
						withMaven(maven: 'MAVEN-3.6.3') {
							FAILED_STAGE=env.STAGE_NAME
							echo 'copying the ear file from the individual target directories and copying it to artifacts directory'
							/*
							sh '''
								rm -rf $WORKSPACE/artifacts
								mkdir -p $WORKSPACE/artifacts
								cd $WORKSPACE
								cp -r dist/libs/EJBIntegrationEAR.ear artifacts/
								cp -r deployment/* artifacts/
								ls -lrt $WORKSPACE/artifacts
							'''
							sh "mvn -X deploy:deploy-file \
								-Dfile=$WORKSPACE/artifacts/EJBIntegrationEAR.ear \
								-DrepositoryId=snapshots \
								-Durl=https://archiva.sgnt.devops.accentureanalytics.com/repository/snapshots/ \
								-DgroupId=io.buildpacks.example \
								-DartifactId=sample \
								-Dversion=EJB-${env.GIT_BRANCH}-build-${env.BUILD_NUMBER}"
							/*
						}
					}
				}
			}
		}
		stage("Deploy") {
			//when { expression {env.GIT_BRANCH == 'dev' ||  propfile['auto_deploy'] == "true" }}
			steps {
				container('gradle') {
					script {
						withMaven(maven: 'MAVEN-3.6.3') {
							FAILED_STAGE=env.STAGE_NAME
							if (env.GIT_BRANCH == 'dev') {
								USERNAME=propfile['USERNAME_DEPLOY']
								HOSTS=propfile['HOSTS_DEPLOY']
								TARGETENV=propfile['target_env']
							} else if(propfile['auto_deploy'] == "true") {
								USERNAME=propfile['USERNAME_AUTO_DEPLOY']
								HOSTS=propfile['HOSTS_AUTO_DEPLOY']
								TARGETENV=propfile['target_auto_env']
							}
							echo "${USERNAME}"
							echo "${HOSTNAME}"
							echo "${TARGETENV}"
							/*
							echo "Pulling artifact from the repository to deploy"
							sh "mvn org.apache.maven.plugins:maven-dependency-plugin:2.8:get \
								-DrepoUrl=https://archiva.sgnt.devops.accentureanalytics.com/repository/snapshots \
								-Dartifact=io.buildpacks.example:sample:EJB-${env.GIT_BRANCH}-build-${env.BUILD_NUMBER}:ear -Ddest=$WORKSPACE/artifacts/${ear_file}"
							sh "ls -la $WORKSPACE/artifacts"
							HOSTS.tokenize(',').each { HOSTNAME ->
								echo "${HOSTNAME}"
								sh '''
									scp -i ${token} -o StrictHostKeyChecking=no -rp $WORKSPACE/artifacts/propfile['ear_file'] ${USERNAME}@${HOSTNAME}:propfile['deploy_dir']/
									scp -i ${token}	-rp $WORKSPACE/artifacts/${TARGETENV}/propfile['migration_file'] ${USERNAME}@${HOSTNAME}:propfile['deploy_dir']/
									scp -i ${token} -rp $WORKSPACE/artifacts/${TARGETENV}/propfile['properties_file'] ${USERNAME}@${HOSTNAME}:propfile['deploy_dir']/
									scp -i ${token} -rp $WORKSPACE/artifacts/${TARGETENV}/propfile['log4j_file'] ${USERNAME}@${HOSTNAME}:propfile['deploy_dir']/

									ssh -i ${token} /bin/chmod 666 propfile['deploy_dir']/propfile['ear_file']
									ssh -i ${token} /bin/chmod 666 propfile['deploy_dir']/propfile['migration_file']
									ssh -i ${token} /bin/chmod 666 propfile['deploy_dir']/propfile['properties_file']
									ssh -i ${token} /bin/chmod 666 propfile['deploy_dir']/propfile['log4j_file']

									ssh -i ${token} cd propfile['deploy_dir'];/usr/local/was/bin/wasMigrate.s -m propfile['migration_file'] -r `date "+%Y%m%d%H%M"`	
								'''
							}
							*/
						}	
					}
				}
			}
		}
		stage('Post Deploy Tests') {
			when { expression {env.GIT_BRANCH == 'dev' ||  propfile['auto_post_deploy_tests'] == "true" }}
			parallel {
				stage('Functional Test') {
					when {expression {propfile['ondemand_functionaltest'] == "true" }}
					steps {
						script {
							FAILED_STAGE=env.STAGE_NAME
							echo "I am running Functional Test here"
						}
					}
				}
				stage('Security Test') {
					when {expression {propfile['ondemand_securitytest'] == "true" }}
					steps {
						container('gradle') {
							script {
								withMaven(maven: 'MAVEN-3.6.3') {
									FAILED_STAGE=env.STAGE_NAME
									echo 'I am running Security Test here'
								}
							}
						}
					}
				}
				stage('Performance Test') {
					when {expression {propfile['ondemand_perfomancetest'] == "true" }}
					steps {
						container('gradle') {
							script {
								withMaven(maven: 'MAVEN-3.6.3') {
									FAILED_STAGE=env.STAGE_NAME
									echo 'I am running Performance Test here'
								}
							}
						}
					}
				}
			}  
		}
	}
	post {
		always {
			script {
				if (propfile['javadoc'] == "true") {
					javadoc(javadocDir: "/$WORKSPACE/target/site/apidocs", keepAll: true)
				}
			}
		}
	}
}
